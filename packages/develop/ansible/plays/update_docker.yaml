---
- name: Network Getting Started First Playbook
  connection: ansible.netcommon.network_cli
  gather_facts: false
  hosts: all
  tasks:
    - name: Check dockerfile exists
      delegate_to: localhost
      stat:
        path: "{{ hostvars[inventory_hostname]['vars']['docker_config'] }}"
      register: dockerfile

    - name: Check .env file exists
      delegate_to: localhost
      stat:
        path: "{{ hostvars[inventory_hostname]['vars']['docker_env'] }}"
      register: docker_env

    - name: Check if data exists
      delegate_to: localhost
      stat:
        path: "{{ hostvars[inventory_hostname]['vars']['docker_data'] }}"
      register: docker_data

    - name: Fail if dockerfile does not exist
      delegate_to: localhost
      fail:
        msg: "Dockerfile does not exist at {{ hostvars[inventory_hostname]['vars']['docker_config'] }}"
      when: dockerfile.stat.exists == false

    - name: Fail if .env file does not exist
      delegate_to: localhost
      fail:
        msg: ".env file does not exist at {{ hostvars[inventory_hostname]['vars']['docker_env'] }}"
      when: docker_env.stat.exists == false

    - name: Copy docker-compose.yaml to remote host
      copy:
        src: "{{ hostvars[inventory_hostname]['vars']['docker_config'] }}"
        dest: "{{ hostvars[inventory_hostname]['vars']['docker_path'] }}/docker-compose.yaml"
      register: docker_changed

    - name: Copy .env file to remote host
      copy:
        src: "{{ hostvars[inventory_hostname]['vars']['docker_env'] }}"
        dest: "{{ hostvars[inventory_hostname]['vars']['docker_path'] }}/.env"
      register: env_changed

    - name: Copy data if exists
      copy:
        src: "{{ hostvars[inventory_hostname]['vars']['docker_data'] }}/"
        dest: "{{ hostvars[inventory_hostname]['vars']['docker_path'] }}"
      when: docker_data.stat.exists == true
      register: data_changed

    - name: Docker compose up
      command: docker compose -f {{ hostvars[inventory_hostname]['vars']['docker_path'] }}/docker-compose.yaml up -d
      args:
        chdir: "{{ hostvars[inventory_hostname]['vars']['docker_path'] }}"
      when:
        - (docker_changed.changed or env_changed.changed or data_changed.changed)
        #and hostvars[inventory_hostname]['vars']['slow_start'] != true
